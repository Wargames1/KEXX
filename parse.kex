*****************************************************************************
* parse.kex - Gordon, M.D. - 9/11/95 - Use KEXX to change lines             *
*****************************************************************************
*
* Format: parse [/init_spec]/from_spec[/modify_spec]/to_spec/ [lines | *]
* ======
* Where:  /           is a character to delimit the command line arguments,
* =====               any character may be used in place of '/'.
*         init_spec   (optional) is any valid expression to set initial values
*                     if specified, ALL commandline arguments are required.
*                     it is executed only once
*         from_spec   tells how to break up each line to be changed, strings
*                     in quotes are delimiters, things outside are variables
*                     Blanks must surround delimited strings and variable names.
*         modify_spec (optional) tells how to modify the variables
*         to_spec     tells how to recombine each line, strings in quotes are
*                     constants, things outside quotes are variables or rexx
*                     functions.
*         lines       optional number of lines to change, 1 line is the default
*                     * - all lines starting with current line.
* Advanced usage:
*        from_spec can be followed by a ";" and fancy Rexx/Kexx commands
*        to_spec can be embedded with fancy Rexx/Kexx commands
*
* Example1:
* =========
*   File Before:
*    3+7=10
*    2+3=5
*    1+3=4
*
*   Command line:
*   ====> parse /a '+' b '=' c/b'='c'-'a/ 2
*
*   File After:
*   7=10-3
*   3=5-2
*   1+3=4
*
* Example2:
* =========
*   File Before:
*    3+7=10
*    2+3=5
*    1+3=4
*
*   Command line:
*   ====> parse /x '+' y '=' z/x'+'y'='z 'implies' y 'equals' z 'minus' x/ *
*
*   File After:
*    3+7=10 implies 7 equals 10 minus     3
*    2+3=5 implies 3 equals 5 minus     2
*    1+3=4 implies 3 equals 4 minus     1
*
* Example3:  (Since parse.kex uses the REXX interpret command...)
* =========
*   File Before:
*    10+30=92982
*    2+3=5
*    1+3=4
*
*   Command line:
*   ====> parse /x '+' y '=' z/d2x(x) '+' d2x(y) '=' d2x(x+y)/ 3
*
*   File After:
*     A + 1E = 28
*     2 + 3 = 5
*     1 + 3 = 4
*
* Example4:  (Use modify_spec to change the data before writing.)
* =========
*   File Before:
*    10+30=92982
*    2+3=5
*    1+3=4
*
*   Command line:
*   ====> parse /x '+' y '=' z/z=x + y;/x '+' y '=' z/ 3
*
*   File After:
*     10 + 30 = 40
*     2 + 3 = 5
*     1 + 3 = 4
*
* Example5:  (Use init_spec to set a counter)
* =========
*   File Before:
*    10+30=92982
*    2+3=5
*    1+3=4
*
*   Command line:
*   ====> parse /i=0;/x '+' y '=' z/i=i+1;z=x + y;/i':'x '+' y '=' z/ 3
*
*   File After:
*     1:10 + 30 = 40
*     2:2 + 3 = 5
*     3:1 + 3 = 4
*
* Note: Extend the functionality by starting the first line with slash asterix
*       and the next line with asterix-slash to convert from kexx to rexx.
*
* Example6: Locate then parse to just affect lines containing a target
*    File before:
*    figure 1
*    a picture of a dog  <the kedit current line>
*    figure 1
*    a picture of a cat
*    figure 2
*    a picture of a rat
*    figure 3
*    a picture of a bat
*
*   Command line:
*   ====> locate /figure/ parse /a b/a (b+1)/
*   1 line parsed
*   ====> repeat *
*   1 line parsed
*
*   File After:
*    figure 1
*    a picture of a dog  <the kedit current line>
*    figure 2
*    a picture of a cat
*    figure 3
*    a picture of a rat
*    figure 4
*    a picture of a bat
*
* Legal Stuff:
*
* MIT License
* Copyright (c) 2024 Gordon, M.D. https://gofund.me/a04e971f  
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:

* The above copyright notice, and this permission notice shall be included in all* 
* copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
parse arg sep +1 initspec (sep) getspec (sep) modspec (sep) putspec (sep) maxlines
if maxlines = "" then
do
   initspec = "nop"  /* no maxlines implies optional initspec was not entered */
   parse arg sep +1 getspec (sep) modspec (sep) putspec (sep) maxlines
   if maxlines == "" then  /* If optional modspec not entered... (and set modspec to "") */
   do
      modspec = ""
      parse arg sep +1 getspec (sep) putspec (sep) maxlines
   end
end

if sep = "?" | sep = "" | getspec = "" | putspec = ""  then
do
   "MSG" "Read help information in file parse.kex macro for usage."
   exit
end

boast = "parse.kex - Martin Gordon - 9/11/95 - Use parse to edit lines"
"MSG" boast
rc = 0
lines  = 0
if maxlines = "" then maxlines = 1
else
if maxlines = "*" then maxlines = 99999999

curline = line.1()
if curline < 1 then "LOCATE +1"
interpret initspec
do while rc = 0  & lines < maxlines
  line = curline.3()
  interpret "parse var line" getspec
  if modspec <> "" then
     interpret modspec
  interpret "line="putspec
  "REPLACE" line
  "REFRESH"
  "NOMSG LOCATE +1"
  lines = lines + 1
end
"LOCATE :"curline
"MSG" lines "lines parsed." boast
exit
